%% name = Lambra::Parser
%% { attr_accessor :ast }

%% ast-location = ::Lambra::AST
%% number       = ast Number(line, column, value)
%% string_value = ast String(line, column, value)
%% char_value   = ast Character(line, column, value)
%% true_value   = ast True(line, column)
%% false_value  = ast False(line, column)
%% nil_value    = ast Nil(line, column)
%% symbol       = ast Symbol(line, column, name)
%% keyword      = ast Keyword(line, column, name)
%% seq          = ast Sequence(line, column, elements)
%% list         = ast List(line, column, elements)
%% vector       = ast Vector(line, column, elements)
%% set          = ast Set(line, column, elements)
%% map          = ast Map(line, column, elements)

eof = !.

space = " " | "\t"

nl = "\n"

sp = space+
- = space* 

comment = ";" (!nl .)* nl

br-sp = (space | ',' | nl)*

number  = < /[1-9][0-9]*/ > { text }
integer = number:n ~number(current_line, current_column, n.to_i)
float   = number:w "." number:f ~number(current_line, current_column, "#{w}.#{f}".to_f)
hexdigits = /[0-9A-Fa-f]/
hex     = '0x' < hexdigits+ > ~number(current_line, current_column, text.to_i(16))

true  = "true" ~true_value(current_line, current_column)
false = "false" ~false_value(current_line, current_column)
nil   = "nil" ~nil_value(current_line, current_column)

word = < /[a-zA-Z_\*][a-zA-Z0-9_\-\*]*/ > { text }
symbol = word:w ~symbol(current_line, current_column, w.to_sym)
keyword = ":" word:w ~keyword(current_line, current_column, w.to_sym)

string = '"' < /[^\\"]*/ > '"' ~string_value(current_line, current_column, text)
character = "\\" word:w ~char_value(current_line, current_column, w.to_sym)

# MACROS
quote  = "'" word:w ~list(current_line, current_column, [symbol(current_line, current_column, :quote), symbol(current_line, current_column, w.to_sym)])

macro = quote

literal = float
        | integer
        | hex
        | true
        | false
        | nil
        | string
        | character
        | vector
        | set
        | map
        | symbol
        | quote
        | keyword

list = "(" expr_list:e ")" ~list(current_line, current_column, e)
     | "(" ")" ~list(current_line, current_column, [])

vector = "[" expr_list:e "]" ~vector(current_line, current_column, e)
     | "[" "]" ~vector(current_line, current_column, [])

set = "#{" expr_list:e "}" ~set(current_line, current_column, e)
     | "#{" "}" ~set(current_line, current_column, [])

map = "{" expr_list:e "}" ~map(current_line, current_column, Hash[*e])
     | "{" "}" ~map(current_line, current_column, {})

expr = list
     | literal

many_expr = comment:e many_expr:m { [e] + m }
          | expr:e many_expr:m { [e] + m }
          | expr:e { [e] } 

sequence = many_expr:e { e.size > 1 ? seq(current_line, current_column, e) : e.first }

expr_list_b = expr:e br-sp expr_list_b:l { [e] + l }
            | expr:e { [e] }

expr_list = br-sp expr_list_b:b br-sp { b }

root = sequence:e eof { @ast = e }
